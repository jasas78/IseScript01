all: 

ifeq (root,$(USER))
$(info )
$(info you can NOT work as root to call this makefile.)
$(info )
$(error )
endif

define EOL


endef

time_called?=$(shell LANG=LANG=en_US.UTF-8 date +"%Y_%m%d__%H%M%P")
export time_called

define TTtmTEXT

TT  dir_current
TM  dir_of_Makefile

endef

ifeq (,$(TT))
$(info you should define TT at first.$(EOL)$(TTtmTEXT))
$(error ENVtt001)
endif
ifeq (,$(TM))
$(info you should define TM at first.$(EOL)$(TTtmTEXT))
$(error ENVtt002)
endif
ifeq (,$(time_called))
$(info you should define time_called at first.$(EOL)$(TTtmTEXT))
$(error ENVtt003)
endif


inMakeScriptDIR:=
$(info )
ifeq ($(TT),$(TM))
inMakeScriptDIR:=1
$(info on the make script dir ... )
else
$(info on the runing dir ... )
endif
$(info )

define tryINCmustExist
$(if $(wildcard $(1)),,$(info )$(info file <$(1)> do not exist 218381 .)$(info )$(error))
$$(eval include $(1))
endef

showOptionListDefault:=m h so gs gc
CFGmakeINCset01:= Makefile.11.git Makefile.13.vim
CFGmakeINCset11:=\
Makefile.32.xst.compile.verilog  \
Makefile.34.ngdbuild.decompress_to_fpga_base_gate  \
Makefile.36.map.to.specified.fpga  \
Makefile.37.par  \
Makefile.38.trc  \
Makefile.39.bitgen  \
Makefile.3a.promgen.bin  \
Makefile.3b.promgen.mcs  \
Makefile.41.impact.upload_and_run  \
Makefile.42.impact.upload_to_flash  \
Makefile.51.partgen.gen_device_pin_info  
CFGmakeINCset21:=Makefile.run.ise01 Makefile.run.OpenOCD
CFGmakeINCset61:= Makefile.alone.iseAnalyze.vimBase Makefile.alone.iseAnalyze.vimTop


define CFGmakeEnvTEXT

you must define the following VARs in the Makefile.env in current directory:
1. CFGmakeRun     : must   : $(CFGmakeINCset21)
2. showOptionList : option :default is "$(showOptionListDefault)" 

endef

define testVARmustExist
$(if $($(1)),,                           $(info )$(info $($(2)):11)$(info )$(error))
endef
define testVARmustBelongTo
$(if $($(1)),,                           $(info )$(info $($(3)):21)$(info )$(error))
$(if $(findstring $($(1)),$($(2))),,     $(info )$(info $($(3)):22)$(info )$(error))
endef

#$(eval $(call testVARmustExist,CFGmakeRun,CFGmakeEnvTEXT))
ifndef inMakeScriptDIR
$(eval $(call tryINCmustExist,$(TT)/Makefile.env))
$(eval $(call testVARmustBelongTo,CFGmakeRun,CFGmakeINCset21,CFGmakeEnvTEXT))
endif





showOptionList?=$(showOptionListDefault)

#
##CFGmake11git:=$(wildcard $(TM)/Makefile.11.git)
##ifndef CFGmake11git
##$(error "173811 why      $(TM)/Makefile.11.git don't exist ?")
##endif
#
#so:=showOption
#so $(so):
#	@echo "$${showOptionTEXT}"
#
#h := help 
#h $(h) : showHelp
#showHelp:
#	@echo "$${showHelpTEXT}"
#
#vim_Makefile:=kkk
#m:=vim_Makefile
#m $(m):
#	vim Makefile
#
#define EOL
#
#
#endef
#
#define showOptionTEXT
#
# $(foreach aa1,$(showOptionList), $(aa1)     ==>> $($(aa1)) $(if $($($(aa1))), ==>> $($($(aa1))))$(EOL))
#
#
#endef
#export showOptionTEXT
#
#gs:=git_status
#gs:
#	git status
#
#gc:=git_commit
#gc:
#	git commit
#
#
#all: showOption
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
##ifndef inMakeScriptDIR
###ifeq (,$(inMakeScriptDIR))
##
##
##include Makefile.env.openocd
##cfg_openocd1:=$(strip $(cfg_openocd1))
##cfg_openocd2:=$(strip $(cfg_openocd2))
##cfg_openocd3:=$(strip $(cfg_openocd3))
##
##define show_help_example
##
##
##usb-jtag.cfg
##for example :
##	use Platform Cable USB : 03fd:0008 Xilinx, Inc. Platform Cable USB II <<<--- select the usb-jtag.cfg 
##    use XCF04S , then :                                                      select the xilinx-xcf-s.cfg 
##
##
##endef
##export show_help_example
##
##ifeq (,$(cfg_openocd1))
##$(error $(show_help_example))
##endif
##ifeq (,$(cfg_openocd2))
##$(error $(show_help_example))
##endif
##
##
##DIR11:=$(TM)/openocd_cfg
##DIR12:=$(TM)/openocd_run
##DIR1x:= $(DIR11) $(DIR12)
##
##
##
##CFG1:=$(firstword $(foreach aa1,$(DIR1x),$(shell find $(aa1)/ |grep $(cfg_openocd1)$$)))
##CFG2:=$(firstword $(foreach aa1,$(DIR1x),$(shell find $(aa1)/ |grep $(cfg_openocd2)$$)))
##
##RUNprog:=$(DIR02)/openocd_run/bin/openocd
##
##define showHelpTEXT
##	CFG1        $(CFG1)
##	CFG2        $(CFG2)
##	CFG3    	$(CFG3)
##	RUNprog     $(RUNprog)
##
##	$(RUNprog) \
##		$(if $(wildcard $(CFG1)), -f $(CFG1)) \
##		$(if $(wildcard $(CFG2)), -f $(CFG2)) \
##		$(if $(wildcard $(CFG3)), -f $(CFG3)) \
##		-c "$(RUNcmd)"
##
##endef
##export showHelpTEXT
##
##
##
##	
##he:=show_help_example
##he $(he):
##	@echo "$${show_help_example}"
##
##endif
