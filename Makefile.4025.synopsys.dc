all:

$(if $(synopsysPATH),,$(error 'you should define the synopsysPATH and run again'))

# http://www.ece.ubc.ca/~edc/464/xilinx.html
# setenv XACT /usr/applic/XSI
# setenv PATH ${XACT}/bin/sparc:${PATH}
# .synopsys_dc.setup

define DCconfig01

set_app_var designer 		"dyn" ;
set_app_var company  		"C-matrixtech_Zhuhai_China";
set 		plot_command 	"lpr -P PRINTER" ;

set_app_var search_path { .  $(DC_HOME)/libraries/syn \
			  }

set_app_var link_library { \
			   "*" \
			   gtech.db \
			   }

set_app_var target_library { \
				 gtech.db \
				 }

set_app_var symbol_library { \
				 generic.sdb \
				 }

set_app_var synthetic_library { \
					dw_foundation.sldb \
					}


define_design_lib WORK -path ./dcWORK

set_app_var compile_fix_multiple_port_nets 		true

set_app_var bus_naming_style 					"%s<%d>"
set_app_var bus_dimension_separator_style 		"><"
set_app_var bus_inference_style 				"%s<%d>"

set 		xnfout_library_version 				"2.0.0"

endef
export DCconfig01

define DCscript01

check_library

$(foreach aa1,$(RTLhdlList),\
	analyze -format verilog $(aa1)$(EOL))

set_port_is_pad "*"
insert_pads

compile

#report_fpga
#report_timing

#replace_fpga

#create_schematic
#plot

#write -format xnf -hierarchy -output asg3.sxnf

#echo "now , you can exit DC and run : xmake -P 4003APC84-6 asg3 "

#exit


endef
export DCscript01

define DCscript02

quit

endef
export DCscript02


cvd:=clean_dc_tmp_file
cvd:
	rm -f \
		.synopsys_dc.setup  	\
		command.log  			\
		dc.script01.scr  		\
		default.svf  			\
		filenames.log			\
		log.dc.log??.txt  		\
		\
		*.pvl *.syn *.mr \

	rm -fr \
		dcWORK	


bd1:=synopsys_DC_open_and_wait_for_cmd
bd1:
	@echo
	echo "$${DCconfig01}" > .synopsys_dc.setup
	echo "$${DCscript01}" > dc.script01.scr
	DC_HOME=$(DC_HOME) 						\
	DESIGNCOMPILER=$(DC_HOME) 				\
	$(synopsysBIN)/dc_shell-xg-t  		\
	-f dc.script01.scr					\
	-output_log_file log.dc.log01.txt
	cat log.dc.log01.txt |grep -i error 	|| echo 'no error'
	cat log.dc.log01.txt |grep -i Warning 	|| echo 'no Warning'
	@echo

bd2:=synopsys_DC_check_then_quit
bd2:
	@echo
	echo "$${DCconfig01}" > 	.synopsys_dc.setup
	echo "$${DCscript01}" > 	dc.script02.scr
	echo "$${DCscript02}" >> 	dc.script02.scr
	DC_HOME=$(DC_HOME) 						\
	DESIGNCOMPILER=$(DC_HOME) 				\
	nohup								\
	$(synopsysBIN)/dc_shell-xg-t  		\
	-f dc.script02.scr					\
	> log.dc.log02.txt
	cat log.dc.log02.txt |grep -i error 	|| echo 'no error'
	cat log.dc.log02.txt |grep -i Warning 	|| echo 'no Warning'
	@echo

wd1:=clean_then__$(bd1)
wd2:=clean_then__$(bd2)
$(wd1):=cvd bd1
$(wd2):=cvd bd2
wd1:$($(wd1))
wd2:$($(wd2))

synopsysDC_OpList:=cvd bd2 wd1 wd2

define DChelp

/e/eda2331/DC_201603/bin/dc_shell-t -help

Usage:  /e/eda2331/DC_201603/linux64/syn/bin/common_shell_exec
	-shell % (Shell Name psyn_shell/dc_shell/dc_sms_shell/de_shell/lc_shell/ptxr)
	-r % (synopsys root path)
	-f % (execute_command file (optional))
	-x % (command to execute (optional))
	-no_init (don't load initialization files (optional))
	-no_home_init (don't load home .synopsys file (optional))
	-no_local_init (don't load local .synopsys file (optional))
	-checkout % (check out these features (optional))
	-timeout # (exit if license server fails to respond
                    after these number of minutes (optional))
	-wait # (exit if feature_list is not all available
                 after these number of minutes (optional))
	-version (show product version and exit immediately (optional))
	-64bit (use 64-bit executable (optional))
	-no_log (don't log commands (optional))
	-output_log_file % (log console output to a file (optional))
	-help  (display this information)
	-galaxy (Galileo license backward compatibility mode)
	-gui (run shell with gui (optional))
	-no_gui (run shell without gui (optional))
	-topographical_mode (run shell in Topographical mode. By default, de_shell commands run in topographical mode)


/e/eda2331/DC_201603/bin/dc_shell-t -help

endef


