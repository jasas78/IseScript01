

all:

# https://segmentfault.com/a/1190000000628247
# https://xebia.com/blog/create-the-smallest-possible-docker-container/
# https://medium.com/@adriaandejonge/simplify-the-smallest-possible-docker-image-62c0e0d342ef
#
#
#
# 1. 
# #### if use build-in : apt install docker docker.io( /usr/bin/docker )
# #### but : # https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce told us :
# 1.0 : if you need to clear the old-version docker-exe : apt-get remove docker docker-engine docker.io containerd runc
#       if you need to clear the old-version data : #      rm -fr /var/lib/docker/* ;  systemctl status docker
# 1.1 apt update
# 1.2 :
# apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
# apt-get remove docker docker-engine docker.io containerd runc
# 1.3 : curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
# 1.4 :
# ubuntu : add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
# debian : add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
# 1.5 : apt update
# 1.6 : apt-get install docker-ce docker-ce-cli containerd.io
# 1.9 : docker run hello-world
#
# 2. 
# systemctl enable docker.socket ; 
# systemctl start  docker.socket ; 
# systemctl enable docker.service ; 
# systemctl start  docker.service ;
#
# 3. add the user "dyn" into the group "docker" : usermod -aG docker dyn 
#
# 4.  ( don't run by root , using dyn )
# tar cv --files-from /dev/null | docker import - scratch 
# docker run -ti google/golang /bin/bash
# ##### then : see : /var/lib/docker/
# ## exit.
#
# 5.  ( don't run by root , using dyn )
# docker run -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):$(which docker) -ti google/golang /bin/bash
# go get github.com/adriaandejonge/helloworld
# ### failed because newest version $GOPATH has multi-path ### cp $GOPATH/src/github.com/adriaandejonge/helloworld/Dockerfile $GOPATH
# cp /go/src/github.com/adriaandejonge/helloworld/Dockerfile /go/
#

ifdef DockerList
DockerSource?=dyn_empty_docker
#DockerSource:=scratchx
DockerSource:=$(strip $(DockerSource))
DockerSrc01:=$(strip $(shell docker images|grep $(DockerSource)|awk '{print $$3}'))
$(iinfo DockerSrc01:$(DockerSrc01))
$(if $(DockerSrc01),,\
	$(info )\
	$(info DockerSrc01 want [$(DockerSource)] null or not exist. exit)\
	$(info you should run the following command :)\
	$(info tar cv --files-from /dev/null | docker import - dyn_empty_docker)\
	$(info )\
	$(error DockerSrc01 want [$(DockerSource)] null or not exist. exit))

define DockerBuildTP02
@echo "#$1,$2"                             >> $3
@echo "FROM $(DockerSource) AS $2"         >> $3
@echo "COPY lnx/$1      /lnx/$1"           >> $3

@echo                                      >> $3

endef

define DockerBuildTP01
-docker rmi $2 2>/dev/null
cd lnx && tar cf - $1|docker import --change 'CMD ["/$1"]' - $2

endef

bdi:=build_docker_images_for_test_only
bdi:
	@echo "Runing $($@)"
	$(foreach aa1,$(DockerList),\
	$(foreach aa2,$(GoPreDockerALL),\
	$(eval bb1:=$(aa1).lnx.$(aa2).exe)\
	$(eval bb2:=$(shell echo $(aa1).lnx.$(aa2).exe|tr [A-Z\-] [a-z_]))\
	$(call DockerBuildTP01,$(bb1),$(bb2))\
	))

#	@echo "_doing $(aa1) $(aa2) lnx/$(bb1) $(bb2)" ;\
#	exit 33$(EOL)\
#

cdn:=clean_docker_none
cdn :
	@echo "Runing $($@)"
	 @echo ; for aa1 in $$(docker images  |grep '<none>'  |awk '{print $$3}' ) ; do\
		 echo docker image rm $${aa1} ; \
		      docker image rm $${aa1} ; \
		 done
ccc:=clean_docker_cache
ccc: 
	@echo "Runing $($@)"
	@-for aa1 in $$(docker container ls -a |awk '{print $$1}'|grep -v ^CONTAINER) ; do\
		docker container rm $${aa1} ; \
		done

showRunHelpList += ccc cdn bdi


endif

